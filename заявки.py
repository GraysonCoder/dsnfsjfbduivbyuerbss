import asyncio
import logging
import random
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import InlineKeyboardMarkup
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from datetime import datetime, timedelta

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s"
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
API_TOKEN = '8167539174:AAHd1uwdYCVF73PPMoxEg9F-nZkU1QOQ4Q8'
ADMIN_ID = 7019630461
CHANNEL_ID = -1002537727394  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π ID –∫–∞–Ω–∞–ª–∞ (—Å -100)
CAPTCHA_TIMEOUT = 300  # 5 –º–∏–Ω—É—Ç

bot = Bot(token=API_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

# –ë–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
users_db = {}
captcha_answers = {}


def generate_captcha(user_id: int) -> tuple[str, InlineKeyboardMarkup]:
    correct = "‚úÖ –ß–µ–ª–æ–≤–µ–∫"
    options = [correct, "ü§ñ –†–æ–±–æ—Ç", "‚ùì –ù–µ –∑–Ω–∞—é", "üö´ –û—Ç–º–µ–Ω–∞"]
    random.shuffle(options)

    captcha_answers[user_id] = correct
    users_db[user_id] = {
        "join_time": datetime.now(),
        "attempts": 0,
        "chat_id": CHANNEL_ID  # –Ø–≤–Ω–æ —É–∫–∞–∑—ã–≤–∞–µ–º ID –∫–∞–Ω–∞–ª–∞
    }

    builder = InlineKeyboardBuilder()
    for option in options:
        builder.button(text=option, callback_data=f"captcha_{option.split()[0]}")
    builder.adjust(2)

    text = (
        "üîê <b>–í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –¥–ª—è –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç:\n"
        f"–£ –≤–∞—Å –µ—Å—Ç—å {CAPTCHA_TIMEOUT // 60} –º–∏–Ω—É—Ç\n\n"
        "‚ö†Ô∏è –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –ø—Ä–∏–≤–µ–¥—É—Ç –∫ –∑–∞–ø—Ä–µ—Ç—É –¥–æ—Å—Ç—É–ø–∞"
    )
    return text, builder.as_markup()


@dp.chat_join_request()
async def handle_join(update: types.ChatJoinRequest):
    user = update.from_user

    if user.is_bot:
        await update.decline()
        logger.info(f"–ë–æ—Ç {user.full_name} –æ—Ç–∫–ª–æ–Ω—ë–Ω")
        return

    try:
        text, markup = generate_captcha(user.id)
        await bot.send_message(user.id, text, reply_markup=markup)
        logger.info(f"–ö–∞–ø—á–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ {user.full_name} (ID: {user.id})")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–ª—è {user.id}: {e}")
        await update.decline()


@dp.callback_query(F.data.startswith('captcha_'))
async def check_captcha(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    answer = callback.data.replace('captcha_', '')
    user_data = users_db.get(user_id, {})

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏
    if not user_data or (datetime.now() - user_data['join_time']).seconds > CAPTCHA_TIMEOUT:
        await callback.answer("–í—Ä–µ–º—è –≤—ã—à–ª–æ!", show_alert=True)
        await decline_user(user_id)
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–≤–µ—Ç–∞
    if answer == captcha_answers.get(user_id, "").split()[0]:
        await approve_user(user_id, callback)
    else:
        await handle_wrong_answer(user_id, callback)


async def approve_user(user_id: int, callback: types.CallbackQuery):
    try:
        await bot.approve_chat_join_request(
            chat_id=users_db[user_id]["chat_id"],
            user_id=user_id
        )
        await callback.message.edit_text(
            "üéâ <b>–î–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à—ë–Ω!</b>\n\n"
            "–¢–µ–ø–µ—Ä—å –≤—ã —É—á–∞—Å—Ç–Ω–∏–∫ –∫–∞–Ω–∞–ª–∞.",
            reply_markup=None
        )
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø—Ä–∏–Ω—è—Ç")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—è—Ç–∏—è {user_id}: {e}")
        await callback.answer("–û—à–∏–±–∫–∞! –°–æ–æ–±—â–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É", show_alert=True)


async def decline_user(user_id: int):
    if user_id in users_db:
        try:
            await bot.decline_chat_join_request(
                chat_id=users_db[user_id]["chat_id"],
                user_id=user_id
            )
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç–∫–ª–æ–Ω—ë–Ω")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è {user_id}: {e}")
        finally:
            if user_id in users_db:
                del users_db[user_id]
            if user_id in captcha_answers:
                del captcha_answers[user_id]


async def handle_wrong_answer(user_id: int, callback: types.CallbackQuery):
    users_db[user_id]["attempts"] += 1

    if users_db[user_id]["attempts"] >= 3:
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω!", show_alert=True)
        await decline_user(user_id)
        await callback.message.edit_text(
            "üö´ <b>–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω</b>\n\n"
            "–ü—Ä–µ–≤—ã—à–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫.",
            reply_markup=None
        )
    else:
        await callback.answer(f"–ù–µ–≤–µ—Ä–Ω–æ! –û—Å—Ç–∞–ª–æ—Å—å {3 - users_db[user_id]['attempts']} –ø–æ–ø—ã—Ç–∫–∏")
        await callback.message.edit_reply_markup(
            reply_markup=generate_captcha(user_id)[1]
        )


@dp.message(Command("stats"))
async def stats_cmd(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        return

    stats = (
        f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
        f"‚Ä¢ –í—Å–µ–≥–æ –ø—Ä–æ–≤–µ—Ä–æ–∫: {len(users_db)}\n"
        f"‚Ä¢ –£—Å–ø–µ—à–Ω—ã—Ö: {sum(1 for u in users_db.values() if u.get('verified'))}\n"
        f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {sum(1 for u in users_db.values() if not u.get('verified'))}"
    )
    await message.answer(stats)


async def main():
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot, allowed_updates=dp.resolve_used_update_types())


if __name__ == '__main__':
    logger.info("=== –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ===")
    asyncio.run(main())